import telebot
from telebot import types
from yt_dlp import YoutubeDL
import instaloader
import logging

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∑–¥–µ—Å—å
bot = telebot.TeleBot('7618745443:AAHb315qHE3E3Le5bFapyyhB_imUlCwWqgo')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

markup = types.InlineKeyboardMarkup()
btn_1 = types.InlineKeyboardButton('‚ñ∂Ô∏è YouTube', callback_data='dlyou')
btn_2 = types.InlineKeyboardButton('üì∏ Instagram', callback_data='dlins')
markup.row(btn_2, btn_1)

L = instaloader.Instaloader()

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Instagram
USERNAME = 'your_username'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram
PASSWORD = 'your_password'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å Instagram

# –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç
# L.login(USERNAME, PASSWORD)

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
message_processing = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
        f'<strong>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</strong> üòä'
        f'\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n–í—ã–±–µ—Ä–∏, –∏–∑ –∫–∞–∫–æ–π —Å–æ—Ü—Å–µ—Ç–∏ –º—ã –±—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å ü§ñ:', parse_mode='html',
        reply_markup=markup
    )

@bot.message_handler(commands=['more'])
def more(message):
    bot.send_message(message.chat.id,
        f'<strong>–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å</strong> ü§ñ:\n', parse_mode='html',
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'dlyou' or call.data == 'retry_dlyou':
        markup_back = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')
        markup_back.row(btn_back)
        msg = bot.edit_message_text('‚ñ∂Ô∏è <b>YouTube</b>\n –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É...', call.message.chat.id, call.message.message_id, reply_markup=markup_back, parse_mode='html')
        bot.register_next_step_handler(msg, lambda msg: process_youtube_link(msg, call.message))
    elif call.data == 'dlins' or call.data == 'retry_dlins':
        markup_back = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back')
        markup_back.row(btn_back)
        msg = bot.edit_message_text('üì∏ <b>Instagram</b>\n –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É...', call.message.chat.id, call.message.message_id, reply_markup=markup_back, parse_mode='html')
        bot.register_next_step_handler(msg, lambda msg: process_instagram_link(msg, call.message))
    elif call.data == 'back':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        more(call.message)

def process_youtube_link(message, instruction_message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if message.message_id in message_processing:
        return
    message_processing[message.message_id] = True
    processing_message = bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ‚è≥')
    handle_youtube_link(message, processing_message, instruction_message)
    del message_processing[message.message_id]

def process_instagram_link(message, instruction_message):
    if message.text.startswith('/'):
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    if message.message_id in message_processing:
        return
    message_processing[message.message_id] = True
    processing_message = bot.send_message(message.chat.id, '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è... ‚è≥')
    handle_instagram_link(message, processing_message, instruction_message)
    del message_processing[message.message_id]

def handle_instagram_link(message, processing_message, instruction_message):
    url = message.text
    try:
        post = instaloader.Post.from_shortcode(L.context, url.split("/")[-2])
        if post.is_video:
            video_url = post.video_url
            bot.send_video(message.chat.id, video_url, caption='–í–∞—à–µ –≤–∏–¥–µ–æ üé¨')
        elif post.typename == 'GraphSidecar':
            media_urls = [node.display_url for node in post.get_sidecar_nodes() if not node.is_video]
            media_count = len(media_urls)
            if media_count > 0:
                bot.send_message(message.chat.id, f'–í–∞—à–∏ —Ñ–æ—Ç–æ: {media_count} —à—Ç. üì∏')
                media_group = [types.InputMediaPhoto(url) for url in media_urls]
                bot.send_media_group(message.chat.id, media_group)
            else:
                bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–µ.")
        else:
            bot.send_photo(message.chat.id, post.url, caption='–í–∞—à–µ —Ñ–æ—Ç–æ üì∏')
        send_retry_button(message, 'retry_dlins')
    except instaloader.exceptions.BadResponseException as e:
        logging.error(f"Error while processing Instagram link {url}: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Instagram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        send_retry_button(message, 'retry_dlins')
    except instaloader.exceptions.ConnectionException as e:
        logging.error(f"Connection error while processing Instagram link {url}: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Instagram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        send_retry_button(message, 'retry_dlins')
    except instaloader.exceptions.PrivateProfileNotFollowedException as e:
        logging.error(f"Private profile error while processing Instagram link {url}: {e}")
        bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º, –∏ –º—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
        send_retry_button(message, 'retry_dlins')
    except Exception as e:
        logging.error(f"Unexpected error while processing Instagram link {url}: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        send_retry_button(message, 'retry_dlins')
    finally:
        bot.delete_message(message.chat.id, processing_message.message_id)
        bot.delete_message(message.chat.id, instruction_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def handle_youtube_link(message, processing_message, instruction_message):
    url = message.text
    ydl_opts = {'format': 'best'}
    try:
        with YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=False)
            video_url = info_dict.get("url", None)
            video_title = info_dict.get('title', None)
            bot.send_video(message.chat.id, video_url, caption=f'–í–∞—à–µ –≤–∏–¥–µ–æ: {video_title} üé¨')
        send_retry_button(message, 'retry_dlyou')
    except Exception as e:
        logging.error(f"Error while processing link {url}: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. üòû")
        send_retry_button(message, 'retry_dlyou')
    finally:
        bot.delete_message(message.chat.id, processing_message.message_id)
        bot.delete_message(message.chat.id, instruction_message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

def send_retry_button(message, callback_data):
    markup_retry = types.InlineKeyboardMarkup()
    btn_retry = types.InlineKeyboardButton('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', callback_data=callback_data)
    markup_retry.row(btn_retry)
    bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞? üîÑ', reply_markup=markup_retry)

@bot.message_handler(func=lambda message: True)
def unknown_message(message):
    bot.send_message(
        message.chat.id,
        f'<strong>{message.from_user.first_name}, —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π üòä, –Ω–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–≥—É –Ω–∞—É—á–∏—Ç—å—Å—è! üöÄ</strong>',
        parse_mode='html'
    )

bot.polling(none_stop=True)
